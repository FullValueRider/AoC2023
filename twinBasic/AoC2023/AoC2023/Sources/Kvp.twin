Class Kvp

    '@PredeclaredId
    '@Exposed
    
    Implements Scripting.Dictionary Via Host
    
    
    [ DefaultMember ]
    Public Function Deb(Optional ByRef ipKeys As Variant, Optional ByRef ipItems As Variant) As Kvp
      With New Kvp
        Return .ConstructInstance(ipKeys, ipItems)
      End With
    End Function
    
    Friend Function ConstructInstance(ByRef ipKeys As Variant, ByRef ipItems As Variant) As Kvp
        Set Host = New Scripting.Dictionary
        ' don't nned to be clever here
        If VBA.IsMissing(VBA.CVar(ipKeys)) Then
            Return Me
        End If
        
        If (Not VBA.IsArray(ipKeys)) Or (Not VBA.IsArray(ipItems)) Then
            Debug.Print "Non indexable parameter:", VBA.TypeName(ipKeys), VBA.TypeName(ipItems)
            Err.Raise 17
        End If
        
        Dim myKeys As Seq = Seq(ipKeys)
        Dim myItems As Seq = Seq(ipItems)
        
        Dim myIndex As Long
        For myIndex = 1 To myKeys.Count
        	If myIndex > myItems.Count Then
            	Exit For
        	End If
            
            Host.Add myKeys.Item(myIndex), myItems.Item(myIndex)
        Next
                
        Return Me
        
    End Function
    
    ' Public Property Get Item(ByVal ipIndex As Long) As Variant
    '     If ipIndex < 1 Or ipIndex > Host.Count Then
    '         Return Null
    '     Else
    '         Return Host.Item(ipIndex)
    '     End If
        
    ' End Property

    ' Public Property Let Item(ByVal ipIndex As Long, ByVal ipItem As Variant)
    '     If ipIndex < 1 Or ipIndex > Host.Count Then
    '         Err.Raise 17, "No such index"
    '     Else
    '         Host.Add ipItem, after:=ipIndex
    '         Host.Remove ipIndex
    '     End If
        
    ' End Property
    
    ' Public Property Set Item(ByVal ipIndex As Long, ByVal ipItem As Variant)
    '     If ipIndex < 1 Or ipIndex > Host.Count Then
    '         Err.Raise 17, "No such index"
    '     Else
    '         Host.Add ipItem, after:=ipIndex
    '         Host.Remove ipIndex
    '     End If
        
    ' End Property
    Public Function HoldsItem(ByRef ipItem As Variant) As Boolean
        Dim myItem As Variant
        For Each myItem In Host.Items
            If myItem = ipItem Then
                Return True
            End If
        Next
        
        Return False
    End Function
    
    Public Function IndexOf(ByRef ipItem As Variant) As Long
        
    End Function
    
    Public Function LacksItem(ByRef ipItem As Variant) As Boolean
        Return Not HoldsItem(ipItem)
    End Function
    
    
    Public Function HoldsKey(ByRef ipKey As Variant) As Boolean
    	Return Host.Exists(ipKey)
    End Function
    
    Public Function LacksKey(ByRef ipKey As Variant) As Boolean
    	    Return Not HoldsKey(ipKey)
    End Function
    
    
    Public Function SortedKeys() As Seq
        If Me.Count = 0 Then
            Return Seq()
        End If
        Return CombSort1(Seq(Me.Keys))
       
    End Function
    
    Public Function SortedItems() As Seq
        If Me.Count = 0 Then
            Return Seq()
        End If
        Return CombSort1(Seq(Me.Items))
    End Function
    
    Private Function CombSort1(ByRef pvarArray As Seq) As Seq
        Const ShrinkFactor = 1.3
        Dim lngGap As Long
        Dim i As Long
        Dim iMin As Long
        Dim iMax As Long
        Dim varSwap As Variant
        Dim blnSwapped As Boolean
    
        iMin = 1
        iMax = pvarArray.Count
        lngGap = iMax - iMin + 1
        Do
            If lngGap > 1 Then
                lngGap = Int(lngGap / ShrinkFactor)
                If lngGap = 10 Or lngGap = 9 Then lngGap = 11
            End If
            blnSwapped = False
            For i = iMin To iMax - lngGap
                If pvarArray.Item(i) > pvarArray.Item(i + lngGap) Then
                    varSwap = pvarArray.Item(i)
                    pvarArray.Item(i) = pvarArray.Item(i + lngGap)
                    pvarArray.Item(i + lngGap) = varSwap
                    blnSwapped = True
                End If
            Next
        Loop Until lngGap = 1 And Not blnSwapped
        
        Return pvarArray
    End Function
    
    
    Public Function KeysFreq() As Kvp
        
        Dim myK As Kvp = Kvp.Deb
        Dim myIndex As Long
        Dim myKeys As Variant = Me.Keys
        For myIndex = 1 To Host.Count
            If myK.HoldsKey(myKeys(myIndex)) Then
                myK.Item(myKeys(myIndex)) += 1
            Else
                myK.Add Key:= myKeys(myIndex), Item:=1
            End If
        Next
        'Fmt.Dbg "{0}", myK
        Return myK
        
    End Function
    
    Public Function ItemsFreq() As Kvp
        
        Dim myK As Kvp = Kvp.Deb
        Dim myItem As Variant
        Dim myIndex As Long
        Dim myItems As Variant = Me.Items
        For myIndex = 1 To Host.Count
        	
            If myK.HoldsKey(myItems(myIndex)) Then
                myK.Item(myItems(myIndex)) += 1
            Else
                myK.Add Key:= myItems(myIndex), Item:=1
            End If
        Next
        '.Dbg "{0}", myK
        Return myK
        
    End Function
    
    
    ' Public Function Reverse() As Seq
        
    '     Dim myS As Seq = Seq.Deb
    '     Dim myIndex As Long
    '     For myIndex = Me.Count To 1 Step -1
    '         myS.Add Host.Item(myIndex)
    '     Next
        
    '     Return myS
        
    ' End Function
    
    
    Public Function FirstKeyOfMaxItem() As String
        
        Dim myIndex As Long
        Dim myMaxItem As Variant = Null
        Dim myMaxKey As Variant
        'Dim myItem As Variant = Null
        Dim myKey As Variant
        For Each myKey In Host
            If VBA.IsNull(myMaxItem) Then
                myMaxItem = Host.Item(myKey)
                myMaxKey = myKey
            Else
                If Host.Item(myKey) > myMaxItem Then
                    If VBA.IsObject(Host.Item(myKey)) Then
                        Set myMaxItem = Host.Item(myKey)
                    Else
                        myMaxItem = Host.Item(myKey)
                    End If
                    myMaxKey = myKey
                End If
            End If
        Next
        
        Return myMaxKey
        
    End Function
    
    Public Function LastKeyOfMaxItem() As String
        
        Dim myIndex As Long
        Dim myMaxItem As Variant = Null
        Dim myMaxKey As Variant
        'Dim myItem As Variant = Null
        Dim myKey As Variant
        'Fmt.Dbg "{0}", Me
        For Each myKey In Host
            If VBA.IsNull(myMaxItem) Then
                myMaxItem = Host.Item(myKey)
                myMaxKey = myKey
            Else
                If Host.Item(myKey) >= myMaxItem Then
                	If VBA.IsObject(Host.Item(myKey)) Then
                        Set myMaxItem = Host.Item(myKey)
                    Else
                    	myMaxItem = Host.Item(myKey)
                    End If
                    myMaxKey = myKey
                End If
            End If
        Next
        
        Return myMaxKey
        
    End Function

End Class