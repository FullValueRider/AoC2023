Class Day02

    Option Explicit
    '@PredeclaredId
    '@Exposed
    Private Const Today             As String = "\2023\Day02.txt"
    
    Private Enum e_Colour
        m_Red = 0
        m_First = m_Red
        m_Green = 1
        m_Last = 2
        m_Blue = m_Last
    End Enum
        
    Private Type State
        Data As Scripting.Dictionary
        Criteria As Variant
    End Type

    Private s                           As State

    
    Public Sub Execute()
        
        Part01
        Part02
            
    End Sub

 
    Private Sub Part01()

        Initialise
        
        Dim myResult As Long = 0
        Dim myKey As Variant
        For Each myKey In s.Data.Keys
            If IsGamePossible(s.Data.Item(myKey)) Then
            	myResult += VBA.CLng(myKey)
            End If
        Next
       
        Debug.Print Fmt.Text("The answer to Day {0} part 1 is {1}.  Found is {2}", VBA.Mid$(Today, 10, 2), "2913", myResult)
        
    End Sub
    

    Private Sub Part02()
        
        ' in part 2 we have the situation 'eighttwo' which means that
        ' the replaced data is eigh2 because two gets replaced before 8
        Initialise
        
        Dim myResult As Long = 0
        Dim myKey As Variant
        For Each myKey In s.Data.Keys
            myResult += GamePower(s.Data.Item(myKey))
        Next
            
        Fmt.Dbg "The answer to Day {0} part 2 is {1}.  Found is {2}", VBA.Mid$(Today, 10, 2), "55593", myResult

    End Sub

    Private Sub Initialise()
        Dim myData As Variant = GetFileAsArrayOfStrings(AoCData & Today)
        
        s.Criteria = Array(12&, 13&, 14&)
        
        Dim myStrs() As Variant
        Dim myD As Dictionary = New Dictionary
        ReDim myStrs(LBound(myData) To UBound(myData))
        Dim myIndex As Long
        For myIndex = LBound(myData) To UBound(myData)
        	myData (myIndex) = Replace(myData(myIndex), "Game ", "")
            myData (myIndex) = Replace(myData(myIndex), ": ", ";")
            myData (myIndex) = Replace(myData(myIndex), "; ", ";")
            myData (myIndex) = Replace(myData(myIndex), ", ", ",")
            
            Dim myTmp As Variant = VBA.Split(myData(myIndex), ";", 2)
         
            myD.Add key:=myTmp(0), Item:= VBA.Split(myTmp(1), ";")
            
            
        Next
        Set s.Data = myD
     End Sub
     
     Private Function IsGamePossible(ByRef ipPulls As Variant) As Boolean
     	
     	Dim myFound(0 To 2) As Long
        
        Dim myPull As Variant
        For Each myPull In ipPulls
        	
        	Dim myBall As Variant
            For Each myBall In Split(myPull, ",")
        	    Dim myItems As Variant = Split(myBall)
                Dim myColour As String = myItems(1)
                Dim myCount As Long = VBA.CLng(myItems(0))
                Select Case myColour
                	
                    Case "red"
                        myFound(m_Red) = IIf(myCount > myFound(m_Red), myCount, myFound(m_Red))
                        
                    Case "green"
                        myFound(m_Green) = IIf(myCount > myFound(m_Green), myCount, myFound(m_Green))
                        
                    Case "blue"
                        myFound(m_Blue) = IIf(myCount > myFound(m_Blue), myCount, myFound(m_Blue))
                        
                End Select
            Next
        Next
        
        Dim myIndex As Long
        For myIndex = m_First To m_Last
        	If myFound(myIndex) > s.Criteria(myIndex) Then
            	Return False
        	End If
        Next
        
        Return True
     End Function
     
     Private Function GamePower(ByRef ipPulls As Variant) As Long
         
         Dim myFound(0 To 2) As Long
        
        Dim myPull As Variant
        For Each myPull In ipPulls
            
            Dim myBall As Variant
            For Each myBall In Split(myPull, ",")
                Dim myItems As Variant = Split(myBall)
                Dim myColour As String = myItems(1)
                Dim myCount As Long = VBA.CLng(myItems(0))
                Select Case myColour
                    
                    Case "red"
                        myFound(m_Red) = IIf(myCount > myFound(m_Red), myCount, myFound(m_Red))
                        
                    Case "green"
                        myFound(m_Green) = IIf(myCount > myFound(m_Green), myCount, myFound(m_Green))
                        
                    Case "blue"
                        myFound(m_Blue) = IIf(myCount > myFound(m_Blue), myCount, myFound(m_Blue))
                        
                End Select
            Next
        Next
        
        Return myFound(m_Red) * myFound(m_Blue) * myFound(m_Green)
        
     End Function

End Class