Class Seq

    '@PredeclaredId
    '@Exposed
    
	Implements Collection Via Host
    
    
    [ DefaultMember ]
    Public Function Deb(Optional ByRef ipItems As Variant) As Seq
      With New Seq
        Return .ConstructInstance(ipItems)
      End With
    End Function
    
    Friend Function ConstructInstance(ByRef ipItems As Variant) As Seq
    	Set Host = New Collection
        
        If VBA.IsMissing(VBA.CVar(ipItems)) Then
        	Return Me
        End If
        
    	If TypeInfo.IsNotIndexable(ipItems) Then
            Debug.Print VBA.TypeName(ipItems)
        	Err.Raise 17
    	End If
        
        Dim myItem As Variant
        Select Case True
        	Case TypeInfo.IsString(ipItems)
                Dim myIndex As Long
                For myIndex = 1 To VBA.Len(ipItems)
                	Host.Add VBA.Mid$(ipItems, myIndex, 1)
                Next
                
            Case VBA.IsArray(ipItems)
                
                For Each myItem In ipItems
                	Host.Add myItem
                Next
                
            Case TypeInfo.IsItemByIndex(ipItems)
               
                For Each myItem In ipItems
                	Host.Add myItem
                Next
                
        End Select
        
        Return Me
        
    End Function
    
    Public Property Get Item(ByVal ipIndex As Long) As Variant
        If ipIndex < 1 Or ipIndex > Host.Count Then
        	Return Null
        Else
            Return Host.Item(ipIndex)
        End If
    	
    End Property

    Public Property Let Item(ByVal ipIndex As Long, ByVal ipItem As Variant)
        If ipIndex < 1 Or ipIndex > Host.Count Then
            Err.Raise 17, "No such index"
        Else
            Host.Add ipItem, after:=ipIndex
            Host.Remove ipIndex
        End If
        
    End Property
    
    Public Property Set Item(ByVal ipIndex As Long, ByVal ipItem As Variant)
        If ipIndex < 1 Or ipIndex > Host.Count Then
            Err.Raise 17, "No such index"
        Else
            Host.Add ipItem, after:=ipIndex
            Host.Remove ipIndex
        End If
        
    End Property
    Public Function HoldsItem(ByRef ipItem As Variant) As Boolean
    	Dim myItem As Variant
        For Each myItem In Host
        	If myItem = ipItem Then
            	Return True
        	End If
        Next
        
        Return False
    End Function
    
    Public Function IndexOf(ByRef ipItem As Variant) As Long
    	
    End Function
    
    Public Function LacksItem(ByRef ipItem As Variant) As Boolean
    	Return Not HoldsItem(ipItem)
    End Function
    
    Public Function Sort() As Seq
    	If Me.Count = 0 Then
        	Return Me
    	End If
    	Return CombSort1(Me)
       
    End Function
    
    Private Function CombSort1(ByRef pvarArray As Seq) As Seq
        Const ShrinkFactor = 1.3
        Dim lngGap As Long
        Dim i As Long
        Dim iMin As Long
        Dim iMax As Long
        Dim varSwap As Variant
        Dim blnSwapped As Boolean
    
        iMin = 1
        iMax = pvarArray.Count
        lngGap = iMax - iMin + 1
        Do
            If lngGap > 1 Then
                lngGap = Int(lngGap / ShrinkFactor)
                If lngGap = 10 Or lngGap = 9 Then lngGap = 11
            End If
            blnSwapped = False
            For i = iMin To iMax - lngGap
                If pvarArray.Item(i) > pvarArray.Item(i + lngGap) Then
                    varSwap = pvarArray.Item(i)
                    pvarArray.Item(i) = pvarArray.Item(i + lngGap)
                    pvarArray.Item(i + lngGap) = varSwap
                    blnSwapped = True
                End If
            Next
        Loop Until lngGap = 1 And Not blnSwapped
        
        Return pvarArray
    End Function
    
    
    Public Function Freq() As Kvp
    	'Fmt.Dbg "{0}", Host
        Dim myK As Kvp = Kvp.Deb
        Dim myItem As Variant
        For Each myItem In Host
        	If myK.HoldsKey(myItem) Then
                myK.Item(myItem) = myK.Item(myItem) + 1
            Else
                myK.Add Key:= myItem, Item:=1
            End If
        Next
        
        ' need to use deb because scripting.dictionary has .Item as the default memeber
        Return Kvp.Deb(myK.Keys, myK.Items)
        
    End Function
    
    
    Public Function Reverse() As Seq
    	
        Dim myS As Seq = Seq.Deb
        Dim myIndex As Long
        For myIndex = Me.Count To 1 Step -1
        	myS.Add Host.Item(myIndex)
        Next
        
        Return myS
        
    End Function
    
    
    Public Function KeyOfMaxItem() As String
    	
        Dim myIndex As Long
        Dim myMax As Variant
        Dim myMaxindex As Long = 1
        For myIndex = 1 To Me.Count
            Dim myItem As Variant = Array(Host.Item(1))
        	If myIndex = 1 Then
                myMax = myItem
            Else
                myMax = IIf(myItem(0) > myMax(0), myItem, myMax)
                myMaxindex = myIndex
            End If
        Next
        
        Return Host.Keys(myMaxindex)
        
    End Function
    
End Class